{"version":3,"sources":["components/Navbar/index.js","components/Wrapper/index.js","components/ImageCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","href","status","score","topScore","Wrapper","children","ImageCard","alt","src","image","clicked","id","onClick","clickedImage","clickedImages","App","state","images","console","log","includes","setState","sort","Math","random","push","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wjCAcmBA,MAVnB,SAAgBC,GACZ,OACI,yBAAKC,UAAU,gCACX,yBAAKA,UAAU,eAAeC,KAAK,KAAnC,eACA,yBAAKD,UAAU,eAAeC,KAAK,KAAKF,EAAMG,QAC9C,yBAAKF,UAAU,eAAeC,KAAK,KAAnC,UAAgDF,EAAMI,MAAtD,iBAA4EJ,EAAMK,SAAlF,O,MCFGC,MAJf,SAAiBN,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMO,W,MCa1BC,MAdf,SAAoBR,GAChB,OACI,yBAAKC,UAAU,QAEX,yBAAKA,UAAU,iBACX,yBAAKQ,IAAI,cAAcC,IAAKV,EAAMW,MAAOC,QAAQ,KAAKC,GAAIb,EAAMa,GAAIC,QAAS,kBAAMd,EAAMe,aAAaf,EAAMa,KAAKZ,UAAU,a,OCCvIG,EAAM,EACNY,EAAc,GA8DHC,E,2MAzDbC,MAAO,CACLC,OAAQA,EACRH,cAAe,GACfZ,MAAO,EACPC,SAAU,EACVF,OAAQ,4B,EAIVY,aAAe,SAAAF,GAIb,OAFAO,QAAQC,IAAIR,GAERG,EAAcM,SAAST,IACzBO,QAAQC,IAAI,UAAY,EAAKH,MAAMd,OAEhC,EAAKc,MAAMd,MAAQ,EAAKc,MAAMb,WAC/B,EAAKkB,SAAS,CAAElB,SAAU,EAAKa,MAAMd,QACrCgB,QAAQC,IAAI,EAAKhB,UACjBe,QAAQC,IAAI,YAGd,EAAKE,SAAS,CAAEP,cAAe,GAAIZ,MAAO,EAAGD,OAAQ,0CAErDC,EAAM,EACNY,EAAc,QACd,EAAKE,MAAMC,OAAOK,MAAK,kBAAMC,KAAKC,SAAU,QAG5CtB,IAEAgB,QAAQC,IAAIjB,GACZY,EAAcW,KAAKd,GACnB,EAAKU,SAAS,CAAEP,cAAc,EAAKA,cAAeZ,MAAOA,EAAOD,OAAQ,gBACxEiB,QAAQC,IAAIL,QACZ,EAAKE,MAAMC,OAAOK,MAAK,kBAAMC,KAAKC,SAAU,Q,wEAKtC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQvB,OAAQyB,KAAKV,MAAMf,OAAQC,MAAOwB,KAAKV,MAAMd,MAAOC,SAAUuB,KAAKV,MAAMb,WAEhFuB,KAAKV,MAAMC,OAAOU,KAAI,SAAAlB,GAAK,OAC5B,kBAAC,EAAD,CACAE,GAAIF,EAAME,GACVF,MAAOA,EAAMA,MACbI,aAAc,EAAKA,uB,GAnDTe,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4ca54c1b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <div className=\"navbar-brand\" href=\"#\">Clicky Game</div>\r\n            <div className=\"navbar-brand\" href=\"#\">{props.status}</div>\r\n            <div className=\"navbar-brand\" href=\"#\">Score: { props.score } | Top Score: {props.topScore} </div>\r\n        </nav>\r\n    );\r\n  }\r\n\r\n    export default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction ImageCard (props) {\r\n    return (\r\n        <div className='card'>\r\n            {/* <span onClick={() => props.clickedImage(props.id)} className=\"image\"> */}\r\n            <div className='img-container'>\r\n                <img alt='imageHolder' src={props.image} clicked='no' id={props.id} onClick={() => props.clickedImage(props.id)} className=\"image\" />\r\n            </div>\r\n            {/* </span> */}\r\n        </div>\r\n\r\n\r\n\r\n    );\r\n}\r\nexport default ImageCard;","import React, { Component } from 'react';\n\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Wrapper from './components/Wrapper';\nimport ImageCard from './components/ImageCard';\nimport images from './images.json';\n// import { thisTypeAnnotation } from '@babel/types';\n\nlet score=0;\nlet clickedImages=[];\n\n\nclass App extends Component {\n\n  state= {\n    images: images,\n    clickedImages: [],\n    score: 0,\n    topScore: 0,\n    status: 'Click an image to begin!'\n  };\n\n\n  clickedImage = id => {\n    //let clickedImages = this.state.clickedImages;\n    console.log(id);\n\n    if (clickedImages.includes(id)) {\n      console.log('score: ' + this.state.score)\n\n      if(this.state.score > this.state.topScore ){\n        this.setState({ topScore: this.state.score })\n        console.log(this.topScore)\n        console.log('testing')\n      };\n\n      this.setState({ clickedImages: [], score: 0, status: 'Game over! Click an image to restart!'});\n\n      score=0;\n      clickedImages=[];\n      this.state.images.sort(() => Math.random() -0.5);\n      return;\n    } else {\n      score++;\n\n      console.log(score);\n      clickedImages.push(id);\n      this.setState({ clickedImages:this.clickedImages, score: score, status: 'Good guess!' })\n      console.log(clickedImages);\n      this.state.images.sort(() => Math.random() -0.5);\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar status={this.state.status} score={this.state.score} topScore={this.state.topScore}>\n        </Navbar>\n        {this.state.images.map(image => (\n        <ImageCard\n        id={image.id}\n        image={image.image}\n        clickedImage={this.clickedImage}/>\n        ))}\n\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}